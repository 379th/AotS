import React, { useRef, useEffect, useState } from 'react';

interface DrawingCanvasProps {
  value: string;
  onChange: (value: string) => void;
  className?: string;
}

export const DrawingCanvas: React.FC<DrawingCanvasProps> = ({ 
  value, 
  onChange, 
  className = "" 
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);
  const [previousState, setPreviousState] = useState<string>('');

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–∞–ª—å—Ü–µ–º
    ctx.strokeStyle = '#d97706'; // amber-600
    ctx.lineWidth = 4; // –£–≤–µ–ª–∏—á–∏–ª —Ç–æ–ª—â–∏–Ω—É –¥–ª—è –ø–∞–ª—å—Ü–∞
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';

    setContext(ctx);

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å—É–Ω–∫–∞
    if (value && value.startsWith('data:image')) {
      const img = new Image();
      img.onload = () => {
        ctx.drawImage(img, 0, 0);
      };
      img.src = value;
    }
  }, [value]);

  const saveCurrentState = () => {
    const canvas = canvasRef.current;
    if (!canvas) return '';
    
    return canvas.toDataURL('image/png');
  };

  const undo = () => {
    if (!previousState) return;
    
    const canvas = canvasRef.current;
    const ctx = context;
    if (!canvas || !ctx) return;

    const img = new Image();
    img.onload = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(img, 0, 0);
      onChange(previousState);
      setPreviousState(''); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    };
    img.src = previousState;
  };

  const getMousePos = (e: React.MouseEvent | React.TouchEvent) => {
    const canvas = canvasRef.current;
    if (!canvas) return { x: 0, y: 0 };

    const rect = canvas.getBoundingClientRect();
    const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;
    const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY;

    return {
      x: (clientX - rect.left) * (canvas.width / rect.width),
      y: (clientY - rect.top) * (canvas.height / rect.height)
    };
  };

  const startDrawing = (e: React.MouseEvent | React.TouchEvent) => {
    e.preventDefault();
    if (!context) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    setPreviousState(saveCurrentState());
    
    setIsDrawing(true);
    const pos = getMousePos(e);
    context.beginPath();
    context.moveTo(pos.x, pos.y);
  };

  const draw = (e: React.MouseEvent | React.TouchEvent) => {
    e.preventDefault();
    if (!isDrawing || !context) return;

    const pos = getMousePos(e);
    context.lineTo(pos.x, pos.y);
    context.stroke();
  };

  const stopDrawing = () => {
    if (!isDrawing) return;
    
    setIsDrawing(false);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    const canvas = canvasRef.current;
    if (canvas) {
      const dataUrl = canvas.toDataURL('image/png');
      onChange(dataUrl);
    }
  };

  const clearCanvas = () => {
    if (!context || !canvasRef.current) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    setPreviousState(saveCurrentState());
    
    context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);
    onChange('');
  };

  return (
    <div className={`relative ${className}`}>
      <div className="text-xs text-amber-200/60 mb-2 text-center">
        üëÜ –†–∏—Å—É–π –ø–∞–ª—å—Ü–µ–º –∏–ª–∏ –º—ã—à–∫–æ–π
      </div>
      <canvas
        ref={canvasRef}
        width={300}
        height={200}
        className="w-full h-48 border border-amber-900/30 rounded-lg bg-white/10 cursor-crosshair touch-none select-none"
        onMouseDown={startDrawing}
        onMouseMove={draw}
        onMouseUp={stopDrawing}
        onMouseLeave={stopDrawing}
        onTouchStart={startDrawing}
        onTouchMove={draw}
        onTouchEnd={stopDrawing}
        style={{ touchAction: 'none' }} // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∂–µ—Å—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞
      />
      <div className="absolute top-2 right-2 flex gap-1">
        <button
          onClick={undo}
          disabled={!previousState}
          className={`px-2 py-1 text-xs text-white rounded transition-colors ${
            previousState 
              ? 'bg-amber-600/80 hover:bg-amber-600' 
              : 'bg-gray-500/50 cursor-not-allowed'
          }`}
          title="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        >
          ‚Ü©Ô∏è
        </button>
        <button
          onClick={clearCanvas}
          className="px-2 py-1 text-xs bg-amber-600/80 text-white rounded hover:bg-amber-600 transition-colors"
          title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"
        >
          üóëÔ∏è
        </button>
      </div>
    </div>
  );
};
